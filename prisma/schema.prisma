generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum Role {
  ADMIN
  MEMBER
  EXTERNAL
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  role          Role          @default(MEMBER)
  accounts      Account[]
  sessions      Session[]
  userOnEvents  UserOnEvent[]

  @@map("users")
}

model EventRole {
  id                String             @id @default(cuid())
  name              String             @unique
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  userOnEvents      UserOnEvent[]
  permissionsOnRole PermissionOnRole[]

  @@map("event-roles")
}

model Permission {
  id                String             @id @default(cuid())
  name              String // editCalendar
  description       String // Edit calendar
  permissionOnRoles PermissionOnRole[]

  @@map("permissions")
}

model PermissionOnRole {
  eventRole    EventRole  @relation(fields: [eventRoleId], references: [id], onDelete: Cascade)
  eventRoleId  String
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  permissionId String

  @@id([eventRoleId, permissionId])
  @@unique([eventRoleId, permissionId])
  @@index([permissionId])
  @@map("permission-on-roles")
}

model UserOnEvent {
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  event       Event     @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId     String
  assignedAt  DateTime  @default(now())
  assignedBy  String
  eventRole   EventRole? @relation(fields: [eventRoleId], references: [id])
  eventRoleId String?

  @@id([userId, eventId])
  @@unique([userId, eventId])
  @@index([eventId])
  @@index([eventRoleId])
  @@map("users-on-events")
}

model EventType {
  id     String  @id @default(cuid())
  name   String // Concert, Brand event, Sport
  events Event[]

  @@map("event-types")
}

model Event {
  id           String        @id @default(cuid())
  name         String
  logo         String?
  subdomain    String        @unique
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  type         EventType     @relation(fields: [typeId], references: [id])
  typeId       String
  userOnEvents UserOnEvent[]

  @@index([typeId])
  @@map("events")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  refresh_token_expires_in Int?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  oauth_token_secret       String?
  oauth_token              String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification-tokens")
}
