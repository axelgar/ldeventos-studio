generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum Role {
  ADMIN // Admins
  MEMBER // LD Employees
  EXTERNAL // Others
}

model User {
  id             String          @id @default(cuid())
  name           String
  email          String          @unique
  emailVerified  DateTime?
  image          String?
  mobileNumber   String?         @db.VarChar(15)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  role           Role            @default(EXTERNAL)
  accounts       Account[]
  sessions       Session[]
  userOnProjects UserOnProject[]

  @@map("users")
}

model ProjectRole {
  id                String             @id @default(cuid())
  name              String             @unique
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  userOnProjects    UserOnProject[]
  permissionsOnRole PermissionOnRole[]

  @@map("project-roles")
}

model Permission {
  id                String             @id @default(cuid())
  name              String // editCalendar
  description       String // Edit calendar
  permissionOnRoles PermissionOnRole[]

  @@map("permissions")
}

model PermissionOnRole {
  projectRole   ProjectRole @relation(fields: [projectRoleId], references: [id], onDelete: Cascade)
  projectRoleId String
  permission    Permission  @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  permissionId  String

  @@id([projectRoleId, permissionId])
  @@unique([projectRoleId, permissionId])
  @@index([permissionId])
  @@map("permission-on-roles")
}

model UserOnProject {
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  project       Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId     String
  assignedAt    DateTime     @default(now())
  assignedBy    String
  projectRole   ProjectRole? @relation(fields: [projectRoleId], references: [id])
  projectRoleId String?

  @@id([userId, projectId])
  @@unique([userId, projectId])
  @@index([projectId])
  @@index([projectRoleId])
  @@map("users-on-projects")
}

model ProjectType {
  id       String    @id @default(cuid())
  name     String // Concert, Brand project, Sport
  projects Project[]

  @@map("project-types")
}

model Project {
  id            String          @id @default(cuid())
  name          String
  logo          String?
  subdomain     String          @unique
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  type          ProjectType     @relation(fields: [typeId], references: [id])
  typeId        String
  userOnProject UserOnProject[]

  @@index([typeId])
  @@map("projects")
}

model Provider {
  id           String  @id @default(cuid())
  name         String
  contactName  String?
  email        String?
  phoneNumber  String? @db.VarChar(15)
  mobileNumber String? @db.VarChar(15)
  fax          String? @db.VarChar(15)

  @@map("providers")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  refresh_token_expires_in Int?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  oauth_token_secret       String?
  oauth_token              String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification-tokens")
}
